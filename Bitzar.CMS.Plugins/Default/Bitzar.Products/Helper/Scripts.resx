<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlterTable_AddUpdatedAndCreatedAt" xml:space="preserve">
    <value>ALTER TABLE btz_product ADD `UpdatedAt` TIMESTAMP;
ALTER TABLE btz_product ADD `CreatedAt` TIMESTAMP;</value>
    <comment>Command to create the new columns in the product table</comment>
  </data>
  <data name="AlterTable_Category_Field_Highlighted" xml:space="preserve">
    <value>ALTER TABLE btz_category ADD `Highlighted` BOOLEAN NOT NULL DEFAULT 0;</value>
  </data>
  <data name="AlterTable_RenameUpdatedAndCreatedAt" xml:space="preserve">
    <value>ALTER TABLE btz_product CHANGE `Updated_At` `UpdatedAt` TIMESTAMP;
ALTER TABLE btz_product CHANGE `Created_At` `CreatedAt` TIMESTAMP;</value>
    <comment>Command to rename the old columns in the service</comment>
  </data>
  <data name="Check_AttributeTypeValues" xml:space="preserve">
    <value>SELECT COUNT(*) FROM btz_attributetypevalues WHERE Id = @p0 AND IdLanguage = @p1</value>
  </data>
  <data name="Check_AttributeValues" xml:space="preserve">
    <value>SELECT COUNT(*) FROM btz_attributevalues WHERE Id = @p0 AND IdLanguage = @p1;</value>
    <comment>Command to check the attributes values</comment>
  </data>
  <data name="Check_CategoryValue" xml:space="preserve">
    <value>SELECT COUNT(*) FROM btz_categoryvalue WHERE IdCategory = @p0 AND IdLanguage = @p1</value>
    <comment>Command to check the category values</comment>
  </data>
  <data name="CreateField_Description" xml:space="preserve">
    <value>INSERT INTO btz_productfield (IdFieldGroup, Name, Type, ReadOnly) 
SELECT * FROM (SELECT 1, 'Description', 'text', 0) T 
WHERE NOT EXISTS (SELECT IdFieldGroup, Name, Type FROM btz_productfield WHERE Name = 'Description')</value>
    <comment>Command to create the Description Field</comment>
  </data>
  <data name="CreateField_Gallery" xml:space="preserve">
    <value>INSERT INTO btz_productfield (IdFieldGroup, Name, Type, ReadOnly) 
SELECT * FROM (SELECT 1, 'Gallery' AS Name, 'gallery' AS Type, 0) T 
WHERE NOT EXISTS (SELECT IdFieldGroup, Name, Type FROM btz_productfield WHERE Name = 'Gallery')</value>
    <comment>Command to create the Gallery Field</comment>
  </data>
  <data name="CreateField_Text" xml:space="preserve">
    <value>INSERT INTO btz_productfield (IdFieldGroup, Name, Type, ReadOnly) 
SELECT * FROM (SELECT 1, 'Text', 'html', 0) T 
WHERE NOT EXISTS (SELECT IdFieldGroup, Name, Type FROM btz_productfield WHERE Name = 'Text')</value>
    <comment>Command to create the Text Html field</comment>
  </data>
  <data name="CreateField_Url" xml:space="preserve">
    <value>INSERT INTO btz_productfield (IdFieldGroup, Name, Type, ReadOnly) 
SELECT * FROM (SELECT 1, 'Url', 'text', 0) T 
WHERE NOT EXISTS (SELECT IdFieldGroup, Name, Type FROM btz_productfield WHERE Name = 'Url')</value>
    <comment>Command to create the Url Field</comment>
  </data>
  <data name="CreateGroup_Basic" xml:space="preserve">
    <value>INSERT INTO btz_productfieldgroup (Description) 
SELECT * FROM (SELECT 'Básico') T 
WHERE NOT EXISTS (SELECT * FROM btz_productfieldgroup WHERE Description = 'Básico')</value>
    <comment>Command to create the basic group</comment>
  </data>
  <data name="CreateTable_Attribute" xml:space="preserve">
    <value>CREATE TABLE IF NOT EXISTS btz_attribute
(
    Id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    IdType INT,
    Icon VARCHAR(999),
    IdParent INT,
    FOREIGN KEY (IdType) REFERENCES btz_attributetype(Id)
)</value>
    <comment>Create Table Attribute</comment>
  </data>
  <data name="CreateTable_AttributeType" xml:space="preserve">
    <value>CREATE TABLE IF NOT EXISTS btz_attributetype
(
    Id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    Codigo varchar(255)
)</value>
    <comment>Create Table AttributeType</comment>
  </data>
  <data name="CreateTable_AttributeTypeValues" xml:space="preserve">
    <value>CREATE TABLE IF NOT EXISTS btz_attributetypevalues
(
    Id INT NOT NULL REFERENCES btz_attribute(Id),
    IdLanguage INT NOT NULL,
    Value VARCHAR(100) NOT NULL,
    PRIMARY KEY 
    (
		Id,
        IdLanguage
    )
)</value>
    <comment>Create Table AttributeTypeValues</comment>
  </data>
  <data name="CreateTable_AttributeValues" xml:space="preserve">
    <value>CREATE TABLE IF NOT EXISTS btz_attributevalues
(
    Id INT NOT NULL REFERENCES btz_attribute(Id),
    IdLanguage INT NOT NULL,
    Value VARCHAR(100) NOT NULL,
    PRIMARY KEY 
    (
		Id,
        IdLanguage
    )
)</value>
    <comment>Create Table AttributeValues</comment>
  </data>
  <data name="CreateTable_Category" xml:space="preserve">
    <value>CREATE TABLE IF NOT EXISTS btz_category
(
    Id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    IdParent INT REFERENCES btz_category(Id),
    Image VARCHAR(999),
    SKU VARCHAR(256),
    Disabled TINYINT(1) NOT NULL,
    Sort INT(6),
    Highlighted BOOLEAN NOT NULL DEFAULT 0
)</value>
    <comment>Create Table Category</comment>
  </data>
  <data name="CreateTable_CategoryValue" xml:space="preserve">
    <value>CREATE TABLE IF NOT EXISTS btz_categoryvalue
(
    IdCategory INT NOT NULL REFERENCES btz_category(Id),
    IdLanguage INT NOT NULL,
    Value VARCHAR(100) NOT NULL,
    Info VARCHAR(255)  NULL,
    Url VARCHAR(256),
    PRIMARY KEY 
    (
	        IdCategory,
        IdLanguage
    )
)</value>
    <comment>Create Table Category Value</comment>
  </data>
  <data name="CreateTable_Combo" xml:space="preserve">
    <value>CREATE TABLE IF NOT EXISTS btz_productcombo
(
	IdCombo INT NOT NULL REFERENCES btz_product(Id),
    IdProduct INT NOT NULL REFERENCES btz_product(Id),
    Quantidade INT NOT NULL,
    PRIMARY KEY
    (
        IdCombo,
        IdProduct
    )
)</value>
  </data>
  <data name="CreateTable_Product" xml:space="preserve">
    <value>CREATE TABLE IF NOT EXISTS btz_product
(
    Id INT NOT NULL auto_increment PRIMARY KEY,
    IdType INT,
    SKU VARCHAR(100),
    Sort INT,
    SubProduct INT,
  Disabled TINYINT(1) NOT NULL,
  Hide TINYINT(1) NOT NULL,
 FOREIGN KEY (IdType) REFERENCES btz_producttype(Id),
 CreatedAt TIMESTAMP NULL DEFAULT NULL,
 UpdatedAt TIMESTAMP NULL DEFAULT NULL
)</value>
    <comment>Create Table Product</comment>
  </data>
  <data name="CreateTable_ProductAttribute" xml:space="preserve">
    <value>CREATE TABLE IF NOT EXISTS btz_productattribute
(
    IdProduct INT NOT NULL REFERENCES btz_product(Id),
    IdAttribute INT NOT NULL REFERENCES btz_attribute(Id),
    PRIMARY KEY
    (
        IdProduct,
        IdAttribute
    )
)</value>
    <comment>Create Table ProductAttribute</comment>
  </data>
  <data name="CreateTable_ProductCategory" xml:space="preserve">
    <value>CREATE TABLE IF NOT EXISTS btz_productcategory
(
    IdProduct INT NOT NULL REFERENCES btz_product(Id),
    IdCategory INT NOT NULL REFERENCES btz_category(Id),
    PRIMARY KEY
    (
        IdProduct,
        IdCategory
    )
)</value>
    <comment>Create Table Product x Category</comment>
  </data>
  <data name="CreateTable_ProductField" xml:space="preserve">
    <value>CREATE TABLE IF NOT EXISTS btz_productfield
(
    IdField INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    IdFieldGroup INT NOT NULL REFERENCES btz_productfieldgroup(Id),
    Name VARCHAR(100) NOT NULL,
    Description LONGTEXT,
    Type VARCHAR(100) NOT NULL,
    Format LONGTEXT,
    ReadOnly TINYINT(1) NOT NULL,
    `Order` INT NULL
)</value>
    <comment>Create Table Product Field</comment>
  </data>
  <data name="CreateTable_ProductFieldGroup" xml:space="preserve">
    <value>CREATE TABLE IF NOT EXISTS btz_productfieldgroup
(
    Id INT NOT NULL auto_increment PRIMARY KEY,
    Description VARCHAR(100)
)</value>
    <comment>Create Table Product Field Group</comment>
  </data>
  <data name="CreateTable_ProductFieldType" xml:space="preserve">
    <value>CREATE TABLE IF NOT EXISTS btz_productfieldtype
(
    IdType int not null references btz_producttype(Id),
    IdField int not null references btz_productfield(IdField),
    PRIMARY KEY
    (
        IdType,
        IdField
    )
)</value>
  </data>
  <data name="CreateTable_ProductFieldValue" xml:space="preserve">
    <value>CREATE TABLE IF NOT EXISTS btz_productfieldvalue
(
    IdField INT NOT NULL  REFERENCES btz_productfield(IdField),
    IdProduct INT NOT NULL REFERENCES btz_product(Id),
    IdLanguage INT NOT NULL,
    ReadOnly TINYINT(1) NOT NULL,
    Value LONGTEXT,
    PRIMARY KEY (IdField, IdProduct, IdLanguage)
)</value>
    <comment>Create Table Product Field Value</comment>
  </data>
  <data name="CreateTable_ProductReleated" xml:space="preserve">
    <value>CREATE TABLE IF NOT EXISTS btz_productrelated
(
    IdProduct INT NOT NULL REFERENCES btz_product(Id),
    IdRelated INT NOT NULL REFERENCES btz_product(Id),
    PRIMARY KEY
    (
        IdProduct,
        IdRelated
    )
)</value>
    <comment>Create Table Product Related</comment>
  </data>
  <data name="CreateTable_ProductSub" xml:space="preserve">
    <value>CREATE TABLE IF NOT EXISTS btz_productsub
(
    IdProduct INT NOT NULL REFERENCES btz_product(Id),
    IdSubProduct INT NOT NULL REFERENCES btz_product(Id),
    PRIMARY KEY
    (
        IdProduct,
        IdSubProduct
    )
)</value>
  </data>
  <data name="CreateTable_ProductType" xml:space="preserve">
    <value>CREATE TABLE IF NOT EXISTS btz_producttype
(
    Id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    Description varchar(255)
)</value>
  </data>
  <data name="CreateTable_ProductUser" xml:space="preserve">
    <value>CREATE TABLE IF NOT EXISTS btz_productuser
(
    IdProduct INT NULL,
    IdUser INT  NULL
)</value>
  </data>
  <data name="Delete_Attribute" xml:space="preserve">
    <value>DELETE FROM btz_attribute WHERE Id = @p0;</value>
    <comment>Command to remove a specific attribute</comment>
  </data>
  <data name="Delete_AttributeType" xml:space="preserve">
    <value>DELETE FROM btz_attributetype WHERE Id = @p0</value>
    <comment>Command to remove a specific attribute type</comment>
  </data>
  <data name="Delete_Category" xml:space="preserve">
    <value>DELETE FROM btz_category WHERE Id = @p0</value>
    <comment>Command to remove a specific category</comment>
  </data>
  <data name="Delete_CategoryProduct" xml:space="preserve">
    <value>DELETE FROM btz_productcategory WHERE IdCategory = @p0</value>
    <comment>Command to remove relationship from product x category</comment>
  </data>
  <data name="Delete_Combo" xml:space="preserve">
    <value>DELETE FROM btz_productcombo WHERE IdCombo = @p0;</value>
  </data>
  <data name="Delete_Product" xml:space="preserve">
    <value>DELETE FROM btz_product WHERE Id = @p0</value>
    <comment>Command to remove an specific product</comment>
  </data>
  <data name="Delete_ProductAttribute" xml:space="preserve">
    <value>DELETE FROM btz_productattribute WHERE IdProduct = @p0</value>
    <comment>Command to delete all records from product attribute</comment>
  </data>
  <data name="Delete_ProductCategory" xml:space="preserve">
    <value>DELETE FROM btz_productcategory WHERE IdProduct = @p0</value>
    <comment>Command to delete all records from product category</comment>
  </data>
  <data name="Delete_ProductCombo" xml:space="preserve">
    <value>DELETE FROM btz_productcombo WHERE IdProduct = @p1 AND IdCombo = @p0</value>
  </data>
  <data name="Delete_ProductFieldValue_NullOrEmpty" xml:space="preserve">
    <value>DELETE FROM btz_productfieldvalue WHERE idProduct = @p0 AND idLanguage = @p1 AND (value IS NULL OR value = '')</value>
  </data>
  <data name="Delete_ProductRelated" xml:space="preserve">
    <value>DELETE FROM btz_productrelated WHERE IdProduct = @p0</value>
    <comment>Command to delete all the related products of another product</comment>
  </data>
  <data name="Delete_ProductUser" xml:space="preserve">
    <value>DELETE FROM btz_productuser WHERE IdProduct = @p0;</value>
  </data>
  <data name="Delete_ProductValues" xml:space="preserve">
    <value>DELETE FROM btz_productfieldvalue WHERE IdProduct = @p0</value>
    <comment>Command to remove all product values</comment>
  </data>
  <data name="Delete_SubProduct" xml:space="preserve">
    <value>DELETE FROM btz_productsub WHERE IdSubProduct = @p0</value>
    <comment>Command to remove all the product parents</comment>
  </data>
  <data name="Insert_Attribute" xml:space="preserve">
    <value>INSERT INTO btz_attribute (IdType, Icon, IdParent) VALUES (@p0, @p1, @p2); SELECT LAST_INSERT_ID()</value>
    <comment>Command to insert a attribute</comment>
  </data>
  <data name="Insert_AttributeType" xml:space="preserve">
    <value>INSERT INTO btz_attributetype (Codigo) VALUES (""); SELECT LAST_INSERT_ID()</value>
    <comment>Command to insert a attribute type</comment>
  </data>
  <data name="Insert_AttributeTypeValues" xml:space="preserve">
    <value>INSERT INTO btz_attributetypevalues (Id, IdLanguage, Value) VALUES (@p0, @p1, @p2)</value>
    <comment>Command to insert a attribute type values</comment>
  </data>
  <data name="Insert_AttributeValues" xml:space="preserve">
    <value>INSERT INTO btz_attributevalues (Id, IdLanguage, Value) VALUES (@p0, @p1, @p2)</value>
    <comment>Command to insert a attribute values</comment>
  </data>
  <data name="Insert_Category" xml:space="preserve">
    <value>INSERT INTO btz_category (IdParent, Image, Disabled, SKU, Sort, Highlighted) VALUES (@p0, @p1, @p2, @p3, @p4, @p5); SELECT LAST_INSERT_ID();</value>
    <comment>Command to insert a category</comment>
  </data>
  <data name="Insert_CategoryValue" xml:space="preserve">
    <value>INSERT INTO btz_categoryvalue (IdCategory, IdLanguage, Value, Url, Info) VALUES (@p0, @p1, @p2, @p3,@p4)</value>
    <comment>Command to insert a category value</comment>
  </data>
  <data name="Insert_Combo" xml:space="preserve">
    <value>INSERT INTO btz_productcombo (IdCombo, IdProduct, Quantidade) VALUES (@p0, @p1, 1)</value>
  </data>
  <data name="Insert_ComboQuantidade" xml:space="preserve">
    <value>UPDATE btz_productcombo SET Quantidade = @p0 WHERE IdCombo = @p1 AND IdProduct = @p2</value>
  </data>
  <data name="Insert_Product" xml:space="preserve">
    <value>INSERT INTO btz_product (SKU,Disabled,Hide,IdType,CreatedAt,UpdatedAt) VALUES (@p0, @p1,@p2,@p3,@p4,@p5); SELECT LAST_INSERT_ID();</value>
    <comment>Command to Insert New Product in the System</comment>
  </data>
  <data name="Insert_ProductAttribute" xml:space="preserve">
    <value>INSERT INTO btz_productattribute (IdProduct, IdAttribute) VALUES (@p0, @p1)</value>
    <comment>Command to insert an product attribute</comment>
  </data>
  <data name="Insert_ProductCategory" xml:space="preserve">
    <value>INSERT INTO btz_productcategory (IdProduct, IdCategory) VALUES (@p0, @p1)</value>
    <comment>Command to insert an product category</comment>
  </data>
  <data name="Insert_ProductFieldValue" xml:space="preserve">
    <value>INSERT INTO btz_productfieldvalue (IdField, IdProduct, IdLanguage, Value, ReadOnly) 
VALUES (@p0, @p1, @p2, @p3, 0) ON DUPLICATE KEY UPDATE IdProduct=@p1, IdLanguage=@p2, Value = @p3, ReadOnly = 0</value>
    <comment>Command to insert a new product value in the system.</comment>
  </data>
  <data name="Insert_ProductRelated" xml:space="preserve">
    <value>INSERT INTO btz_productrelated (IdProduct, IdRelated) VALUES (@p0, @p1)</value>
    <comment>Command to insert the a new related product</comment>
  </data>
  <data name="Insert_ProductUser" xml:space="preserve">
    <value>INSERT INTO btz_productuser (IdProduct,IdUser) SELECT @p0,@p1 WHERE NOT EXISTS(SELECT * FROM btz_productuser WHERE IdProduct = @p0 AND IdUser = @p1)</value>
  </data>
  <data name="Insert_SubProduct" xml:space="preserve">
    <value>INSERT INTO btz_productsub (IdProduct, IdSubProduct) VALUES (@p0, @p1)</value>
    <comment>Command to insert the a new sub-product</comment>
  </data>
  <data name="Select_Attribute" xml:space="preserve">
    <value>SELECT	c.*, 
		v.Value AS Description, 
		n.Value as Type,
        b.Codigo
FROM    btz_attribute c
        LEFT JOIN btz_attributevalues v ON c.Id = v.Id AND v.IdLanguage = @p0
		LEFT JOIN btz_attributetype b ON c.IdType = b.Id
		LEFT JOIN btz_attributetypevalues n ON n.Id = c.IdType AND n.IdLanguage = @p0;</value>
    <comment>Command to get all the attributes</comment>
  </data>
  <data name="Select_AttributeType" xml:space="preserve">
    <value>SELECT 
    c.*, v.Value
FROM
    btz_attributetype c
        LEFT JOIN
    btz_attributetypevalues v ON c.Id = v.Id AND v.IdLanguage = @p0</value>
    <comment>Command to get all the attributes type</comment>
  </data>
  <data name="Select_AttributeValue" xml:space="preserve">
    <value>SELECT * FROM btz_attributevalues WHERE IdLanguage = @p0</value>
    <comment>Command to select all attributes values</comment>
  </data>
  <data name="Select_Category" xml:space="preserve">
    <value>SELECT c.*, v.Value AS Description,v.Info AS Info, v.Url FROM btz_category c LEFT JOIN btz_categoryvalue v ON c.Id = v.IdCategory AND v.IdLanguage = @p0</value>
    <comment>Command to get all the categories</comment>
  </data>
  <data name="Select_CategoryById" xml:space="preserve">
    <value>SELECT c.*, v.Value AS Description, v.Url FROM btz_category c LEFT JOIN btz_categoryvalue v ON c.Id = v.IdCategory AND v.IdLanguage = @p0 WHERE c.Id = @p1</value>
  </data>
  <data name="Select_CategoryValue" xml:space="preserve">
    <value>SELECT c.*, v.Value AS Description,v.Info AS Info, v.Url FROM btz_category c LEFT JOIN btz_categoryvalue v ON c.Id = v.IdCategory AND v.IdLanguage = @p0</value>
    <comment>Command to select all Category Value</comment>
  </data>
  <data name="Select_CategoryWithProductRelated" xml:space="preserve">
    <value>SELECT distinct PC.IdCategory FROM  btz_productcategory AS PC
JOIN btz_product AS P ON PC.IdProduct = P.Id
WHERE P.Disabled = 0 and P.Hide = 0;</value>
  </data>
  <data name="Select_Category_Fields" xml:space="preserve">
    <value>SELECT
	Column_Name
FROM information_schema.columns
WHERE TABLE_NAME = 'btz_category' AND TABLE_SCHEMA = database()</value>
  </data>
  <data name="Select_Field" xml:space="preserve">
    <value>SELECT  v.IdProduct, f.Name, g.Description AS Category, v.Value, v.IdLanguage, v.ReadOnly, f.Type
 FROM   btz_productfieldvalue v
        INNER JOIN btz_productfield f ON v.IdField = f.IdField
        INNER JOIN btz_productfieldgroup g ON f.IdFieldGroup = g.Id
WHERE   v.IdLanguage = @p0</value>
    <comment>Command to retrieve all the available fields</comment>
  </data>
  <data name="Select_FieldById" xml:space="preserve">
    <value>SELECT  v.IdProduct, f.Name, g.Description AS Category, v.Value, v.IdLanguage
FROM    btz_productfieldvalue v
        INNER JOIN btz_productfield f ON v.IdField = f.IdField
        INNER JOIN btz_productfieldgroup g ON f.IdFieldGroup = g.Id
WHERE   v.IdLanguage = @p0 AND V.IdProduct = @p1</value>
  </data>
  <data name="Select_FieldByProduct" xml:space="preserve">
    <value>SELECT  v.IdProduct, f.Name, g.Description AS Category, v.Value, v.IdLanguage
FROM    btz_productfieldvalue v
        INNER JOIN btz_productfield f ON v.IdField = f.IdField
        INNER JOIN btz_productfieldgroup g ON f.IdFieldGroup = g.Id
WHERE   v.IdLanguage = @p0 AND IdProduct = @p1</value>
  </data>
  <data name="Select_Product" xml:space="preserve">
    <value>SELECT p.* FROM btz_product p WHERE p.Id ORDER BY p.Sort, p.Id</value>
    <comment>Command to get all the products</comment>
  </data>
  <data name="Select_ProductAttribute" xml:space="preserve">
    <value>SELECT * FROM btz_productattribute;</value>
  </data>
  <data name="Select_ProductById" xml:space="preserve">
    <value>SELECT p.* FROM btz_product p WHERE p.Id = @p0</value>
  </data>
  <data name="Select_ProductByUser" xml:space="preserve">
    <value>SELECT p.* FROM btz_product p 
INNER JOIN btz_productuser u ON u.IdProduct = p.Id
WHERE p.Id AND u.IdUser = @p0 ORDER BY p.Sort, p.Id</value>
  </data>
  <data name="Select_ProductField" xml:space="preserve">
    <value>SELECT 
    f.*, g.Description AS FieldGroup
FROM
    btz_productfield f
        INNER JOIN
    btz_productfieldgroup g ON f.IdFieldGroup = g.Id
		INNER JOIN
	btz_productfieldtype p ON f.IdField = p.IdField WHERE p.IdType = @p0</value>
    <comment>Command to get all the fields of the products</comment>
  </data>
  <data name="Select_ProductFieldValue" xml:space="preserve">
    <value>SELECT  v.IdProduct, f.Name, g.Description AS Category, v.Value, v.IdLanguage
FROM    btz_productfieldvalue v
        INNER JOIN btz_productfield f ON v.IdField = f.IdField
        INNER JOIN btz_productfieldgroup g ON f.IdFieldGroup = g.Id
WHERE   v.IdProduct = @p0 AND
		v.IdLanguage = @p1 AND
        v.ReadOnly = 0</value>
    <comment>Command to get all the values for one specific product</comment>
  </data>
  <data name="Select_ProductFieldValueRaw" xml:space="preserve">
    <value>SELECT * FROM btz_productfieldvalue WHERE IdLanguage = @p0</value>
    <comment>Command to select product field value raw data.</comment>
  </data>
  <data name="Select_ProductFieldValue_2" xml:space="preserve">
    <value>SELECT * FROM btz_productfieldvalue</value>
    <comment>Comando para buscar todos os valores para os campos customizados dos produtos</comment>
  </data>
  <data name="Select_ProductField_2" xml:space="preserve">
    <value>SELECT 
    f.*, g.Description AS FieldGroup
FROM
    btz_productfield f
        INNER JOIN
    btz_productfieldgroup g ON f.IdFieldGroup = g.Id</value>
  </data>
  <data name="Select_ProductId" xml:space="preserve">
    <value>SELECT Id FROM btz_product</value>
    <comment>Query para selecionar todos os Ids de produtos</comment>
  </data>
  <data name="Select_ProductRelated" xml:space="preserve">
    <value>SELECT IdRelated FROM btz_productrelated WHERE IdRelated = @p0</value>
  </data>
  <data name="Select_ProductType" xml:space="preserve">
    <value>SELECT * FROM btz_producttype</value>
  </data>
  <data name="Select_ProductUser" xml:space="preserve">
    <value>SELECT * FROM btz_productuser WHERE idProduct = @p0</value>
    <comment>Seleciona o produto usuário tendo como parâmetro o id do produto</comment>
  </data>
  <data name="Select_Product_Fields" xml:space="preserve">
    <value>SELECT Column_Name FROM information_schema.columns WHERE TABLE_NAME = 'btz_product' AND TABLE_SCHEMA = database()</value>
    <comment>Command to get all the product fields.</comment>
  </data>
  <data name="Select_SubProduct" xml:space="preserve">
    <value>SELECT p.* FROM btz_product p WHERE p.Id IN (SELECT IdSubProduct FROM btz_productsub) ORDER BY p.Sort, p.Id</value>
    <comment>Command to select all sub products</comment>
  </data>
  <data name="Select_UserByProduct" xml:space="preserve">
    <value>SELECT p.Id AS IdProduto, u.Id As IdUser, u.FirstName AS UserName FROM btz_productuser AS pu
INNER JOIN btz_user AS u ON pu.IdUser = u.Id
INNER JOIN btz_product AS p ON p.Id = pu.IdProduct
</value>
  </data>
  <data name="Update_Attribute" xml:space="preserve">
    <value>UPDATE btz_attribute SET IdType = @p1, Icon = @p2, IdParent = @p3 WHERE Id = @p0;</value>
    <comment>Command top update a attibute</comment>
  </data>
  <data name="Update_AttributeTypeValues" xml:space="preserve">
    <value>UPDATE btz_attributetypevalues SET Value = @p2 WHERE Id = @p0 AND IdLanguage = @p1;</value>
    <comment>Command top update a attibute type value</comment>
  </data>
  <data name="Update_AttributeValues" xml:space="preserve">
    <value>UPDATE btz_attributevalues SET Value = @p2 WHERE Id = @p0 AND IdLanguage = @p1;</value>
    <comment>Command top update a attibute values</comment>
  </data>
  <data name="Update_Category" xml:space="preserve">
    <value>UPDATE btz_category SET IdParent = @p1, Image = @p2, Disabled = @p3, SKU = @p4, Sort = @p5, Highlighted = @p6 WHERE Id = @p0</value>
    <comment>Command top update a category</comment>
  </data>
  <data name="Update_CategoryValue" xml:space="preserve">
    <value>UPDATE btz_categoryvalue SET Value = @p2, Url = @p3,Info = @p4 WHERE IdCategory = @p0 AND IdLanguage = @p1</value>
    <comment>Command to Update a category value</comment>
  </data>
  <data name="Update_ChildrenCategoryNull" xml:space="preserve">
    <value>UPDATE btz_category SET IdParent = NULL WHERE IdParent = @p0</value>
    <comment>Command to remove relationship between category and their children.</comment>
  </data>
  <data name="Update_Product" xml:space="preserve">
    <value>UPDATE btz_product SET SKU = @p1, Disabled = @p2, Hide = @p3, IdType = @p4, UpdatedAt = @p5 WHERE Id = @p0</value>
    <comment>Command to update an existing product</comment>
  </data>
  <data name="Update_ProductFieldValue" xml:space="preserve">
    <value>UPDATE btz_productfieldvalue 
SET    Value = @p3
WHERE  IdField = @p0 AND
       IdProduct = @p1 AND
       IdLanguage = @p2 AND
       ReadOnly = 0</value>
    <comment>Command to update an existing product field value.</comment>
  </data>
  <data name="Update_ProductFieldValueRaw" xml:space="preserve">
    <value>UPDATE btz_productfieldvalue SET Value = @p3 WHERE IdField = @p0 AND IdProduct = @p1 AND IdLanguage = @p2</value>
  </data>
</root>