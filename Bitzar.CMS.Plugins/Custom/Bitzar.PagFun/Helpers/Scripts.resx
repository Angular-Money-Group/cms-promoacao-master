<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ActivateLotTicket" xml:space="preserve">
    <value>UPDATE 	btz_product
SET 	disabled = 1
where 	SKU = @p0 AND
		Id IN (
			SELECT IdProduct FROM btz_productfieldvalue WHERE IdProduct IN (
				SELECT 	IdSubProduct
				FROM   	btz_productsub
				WHERE  	idProduct = @p1
			)	AND idfield IN (
							SELECT 	IdField 
							FROM 	btz_productfield 
							WHERE 	NAME = 'Ingresso de lote?'
				) 
				AND Value = 1
		);

UPDATE 	btz_product
SET 	disabled = 0
WHERE 	Id = @p2;</value>
  </data>
  <data name="AlterEstablishmentStatus" xml:space="preserve">
    <value>UPDATE btz_userfield uf
 SET uf.Value = @p0 
WHERE uf.IdUser = @p1 
AND uf.Name = 'SituacaoEstabelecimento';</value>
  </data>
  <data name="CancelEstablishmentOrder" xml:space="preserve">
    <value>UPDATE btz_orderdetailfield 
SET Value = CASE WHEN Field = 'StatusAtendimento' THEN 'Cancelado' ELSE @p1 END
WHERE IdOrderDetail IN
	(
		SELECT	IdOrderDetail
        FROM	btz_orderdetail d
				INNER JOIN btz_order o ON o.Id = d.IdOrder
		WHERE	o.Id = @p0
    )
    AND Field IN ('StatusAtendimento', 'MotivoCancelamento')</value>
  </data>
  <data name="CreateRemainingPromoterBalance" xml:space="preserve">
    <value>INSERT INTO pagfun_promoter_events(IdPromoter, IdEvent, IdTicket, TicketQuantity, TicketValue, ChargeFee, TicketsTax, Vip)
SELECT	*
FROM	vRemainingPromoters
WHERE	IdEvent = @p0;</value>
  </data>
  <data name="CreateTableExtract" xml:space="preserve">
    <value>CREATE TABLE IF NOT EXISTS pagfun_extract
(
    Id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    IdUser INT NOT NULL,
    OperationType VARCHAR(255),
    OperationDetail VARCHAR(255) NOT NULL,
    CreditValue DECIMAL(18,2) NOT NULL,
    CreatedAt TIMESTAMP NOT NULL DEFAULT NOW(),
	UpdatedAt TIMESTAMP NOT NULL DEFAULT NOW(),
    Disabled TINYINT(1) NOT NULL,
    FOREIGN KEY (IdUser) REFERENCES btz_user(Id)
);</value>
  </data>
  <data name="GerUsersByEmailAndName" xml:space="preserve">
    <value>SELECT 
	U.Id,
    U.Email,
    U.FirstName,
    U.LastName,
    MAX(CASE WHEN (UF.Name = 'Nome Completo') THEN UF.Value END) AS CompleteName
FROM btz_user U 
JOIN btz_userfield UF 
ON U.Id = UF.IdUser
WHERE U.IdRole = 4 
AND U.Disabled = 0 
AND U.Deleted = 0
AND (U.Email LIKE @p0 OR U.FirstName LIKE @p0 OR U.LastName LIKE @p0)
GROUP BY U.Id, U.Email;</value>
  </data>
  <data name="GetAdminTicketsBalanceByEvent" xml:space="preserve">
    <value>SELECT * FROM vAdminEventBalance WHERE EventId = @p0</value>
  </data>
  <data name="GetAllActiveEvents" xml:space="preserve">
    <value>SELECT po.Id as EventId,
       po.SKU,
       po.EventName,
       po.EventLocal,
       po.EventImageId,
       po.EventInicialDate,
       po.EventFinalDate,
       po.CityId,  
       AV.Value as City,
  po.Disabled,
  po.Hide
  FROM (
    SELECT
    P.Id,
    P.SKU,
    PFV.IdProduct AS IdProduct,
    P.Hide,
    P.Disabled,
    P.IdType,
    MAX(PAT.IdAttribute) AS CityId,
    MAX(CASE WHEN (PF.Name = 'Description') THEN PFV.Value END) AS EventName,
    MAX(CASE WHEN (PF.Name = 'Nome local') THEN PFV.Value END) AS EventLocal,
    MAX(CASE WHEN (PF.Name = 'Mini banner') THEN PFV.Value END) AS EventImageId,
   	CAST(MAX(CASE WHEN (PF.Name = 'Data de inicio') THEN PFV.Value END) AS DATETIME) AS EventInicialDate,
  	CAST(MAX(CASE WHEN (PF.Name = 'Data de término') THEN PFV.Value END) AS DATETIME) AS EventFinalDate
    FROM btz_product P
      INNER JOIN btz_productfieldvalue PFV ON PFV.IdProduct = P.Id
      INNER JOIN btz_productfield PF ON PF.IdField = PFV.IdField
      INNER JOIN btz_productattribute PAT ON PAT.IdProduct = P.Id
    WHERE P.Disabled = 0 AND P.Hide = 0 AND P.IdType = 1
    GROUP BY P.Id
      ) po
	INNER JOIN btz_attributevalues AV ON po.CityId = AV.Id
    WHERE po.EventInicialDate &gt;= CURRENT_DATE
    ORDER BY po.EventInicialDate;</value>
  </data>
  <data name="GetAllEvents" xml:space="preserve">
    <value>SELECT 	R.Id AS EventId,
		MAX(CASE WHEN (F.Name = 'Description') THEN P.Value END) AS EventName,
		MAX(CASE WHEN (F.Name = 'Nome local') THEN P.Value END) AS EventLocal,
		MAX(CASE WHEN (F.Name = 'Mini banner') THEN P.Value END) AS EventImageId,
		MAX(CASE WHEN (F.Name = 'Data de inicio') THEN P.Value END) AS EventInicialDate,
		MAX(CASE WHEN (F.Name = 'Data de término') THEN P.Value END) AS EventFinalDate,
		MAX(CASE WHEN (F.Name = 'Data de término') THEN P.Value END) AS EventFinalDate,
		PAT.IdAttribute AS CityId
FROM 	btz_product R
		INNER JOIN btz_productfieldvalue P ON P.IdProduct = R.Id
		INNER JOIN btz_productfield F ON F.IdField = P.IdField
		INNER JOIN btz_productattribute PAT ON PAT.IdProduct = R.Id
WHERE 	R.IdType = 1
GROUP 	BY EventId,CityId;</value>
  </data>
  <data name="GetAllEventsActive" xml:space="preserve">
    <value>SELECT 	R.Id AS EventId,
		MAX(CASE WHEN (F.Name = 'Description') THEN P.Value END) AS EventName,
		MAX(CASE WHEN (F.Name = 'Nome local') THEN P.Value END) AS EventLocal,
		MAX(CASE WHEN (F.Name = 'Mini banner') THEN P.Value END) AS EventImageId,
		MAX(CASE WHEN (F.Name = 'Data de inicio') THEN P.Value END) AS EventInicialDate,
		MAX(CASE WHEN (F.Name = 'Data de término') THEN P.Value END) AS EventFinalDate,
		MAX(CASE WHEN (F.Name = 'Data de término') THEN P.Value END) AS EventFinalDate,
		PAT.IdAttribute AS CityId
FROM 	btz_product R
		INNER JOIN btz_productfieldvalue P ON P.IdProduct = R.Id
		INNER JOIN btz_productfield F ON F.IdField = P.IdField
		INNER JOIN btz_productattribute PAT ON PAT.IdProduct = R.Id
WHERE 	R.IdType = 1
GROUP 	BY EventId,CityId;</value>
  </data>
  <data name="GetBestSellersEvents" xml:space="preserve">
    <value>SELECT  po.EventId, 
		po.EventName, 
		po.SKU,
		po.EventLocal,
		po.EventImageId,
		po.EventInicialDate,
		po.EventFinalDate,
		po.CityId, 
		City,
		Status,
		SUM(Quantity) as Quantity
FROM 	vorderdetailfield ODF
		INNER JOIN vproductevent po ON ODF.EventId = po.EventId
WHERE 	po.EventInicialDate &gt;= CURRENT_DATE AND Status = 3 AND Price &gt; 0
GROUP 	BY po.EventId, po.EventName, po.SKU, po.EventLocal, po.EventImageId, po.EventInicialDate, po.EventFinalDate, po.CityId, City, Status
ORDER 	BY 6 DESC;</value>
  </data>
  <data name="GetEstablishmentOrders" xml:space="preserve">
    <value>SELECT 	
        pu.IdUser AS IdEstabelecimento,
        o.id AS NrPedido,
        date(SUBSTRING(o.DataPedido,1,10)) AS DataPedido,
        SUBSTRING(o.DataPedido,12,5) AS HoraPedido,
        pftp.Value as DescricaoProduto,
		    ca.value AS Categoria,
	    	o.Price as Preco,
        o.Quantity as Quant,
        CONCAT( u.FirstName, ' ', u.Lastname ) AS Cliente,
        o.Mesa,
        o.StatusAtendimento,
        SUBSTRING(o.DataAtendimento,12,5) AS HoraAtendimento,
        o.TempoEntrega,
        o.MotivoCancelamento
FROM	(
			SELECT o.Id,
          o.CreatedAt AS DataPedido,
          o.IdCustomer AS IdCliente,
					d.IdProduct AS IdSeq,
					d.Quantity,
					d.Price,
          o.Status,
					MAX(IF(f.Field = 'IdSection', f.Value, NULL)) AS IdSection,
					MAX(IF(f.Field = 'IdEvent', f.Value, NULL)) AS IdEvent,
					MAX(IF(f.Field = 'IdTicket', f.Value, NULL)) AS IdTicket,
					MAX(IF(f.Field = 'StatusAtendimento', f.Value, NULL)) AS StatusAtendimento,
          MAX(IF(f.Field = 'Mesa', f.Value, NULL)) AS Mesa,
          MAX(IF(f.Field = 'DataAtendimento', f.Value, NULL)) AS DataAtendimento,
          MAX(IF(f.Field = 'TempoEntrega', f.Value, NULL)) AS TempoEntrega,
          MAX(IF(f.Field = 'MotivoCancelamento', f.Value, NULL)) AS MotivoCancelamento,
          MAX(IF(f.Field = 'Type', f.Value, NULL)) AS TipoProduto
			FROM btz_order o
					INNER JOIN btz_orderdetail      d ON o.Id = d.IdOrder
					INNER JOIN btz_orderdetailfield f ON d.Id = f.IdOrderDetail
					
			GROUP BY o.Id,
					o.Uuid,
					d.Id,
					d.IdProduct,
					d.Quantity,
					d.Price			
		) o
        LEFT JOIN btz_user u ON o.IdCliente = u.Id
        LEFT JOIN btz_product P ON o.IdSection = P.id 
        INNER JOIN btz_productuser pu ON pu.IdProduct = o.IdSection       
        LEFT JOIN btz_productfield pf ON pf.Name = 'Description'
        LEFT JOIN btz_productfieldvalue pftp ON pf.IdField = pftp.IdField and P.Id = pftp.IdProduct
        LEFT JOIN btz_productfieldvalue pev ON pf.IdField = pev.IdField and o.IdEvent = pev.IdProduct
        LEFT JOIN btz_productcategory pc ON pc.IdProduct = o.IdSection
        LEFT JOIN btz_categoryvalue ca ON pc.IdCategory = ca.IdCategory
WHERE o.TipoProduto = 'Estabelecimento' /* produtos tipo Estabelecimento*/
  AND pu.IdUser = @p0 /* Id Estabelecimento */
  AND DATE(o.DataPedido) &gt;= @p1 AND DATE(o.DataPedido) &lt;= @p2
  ORDER BY NrPedido ASC, Categoria ASC, DescricaoProduto ASC;</value>
  </data>
  <data name="GetEventProductsSold" xml:space="preserve">
    <value>SELECT 	pev.Value as EventName,
		P.SKU as Sku,
		pftp.Value as ProductName,
		ca.value AS Category,
		o.Price as Price,
        o.Quantity as Quantity,
        t.OwnerName as BuyerName,
        u.Email as BuyerEmail,
        t.DataConsumo as ConsumeDate,     
        t.Status as Status,
        usu.UserName as UserReadQR ,
        t.CreationDate as BuyDate,
        o.IdTicket
FROM	(
			SELECT  o.Id,
					d.IdProduct AS IdSeq,
					d.Quantity,
					d.Price,
                    o.Status,
					MAX(IF(f.Field = 'IdSection', f.Value, NULL)) AS IdSection,
					MAX(IF(f.Field = 'IdEvent', f.Value, NULL)) AS IdEvent,
					MAX(IF(f.Field = 'IdTicket', f.Value, NULL)) AS IdTicket					
			FROM    btz_order o
					INNER JOIN btz_orderdetail      d ON o.Id = d.IdOrder
					INNER JOIN btz_orderdetailfield f ON d.Id = f.IdOrderDetail
					
			GROUP   BY o.Id,
					o.Uuid,
					d.Id,
					d.IdProduct,
					d.Quantity,
					d.Price			
		) o
		INNER  JOIN btz_ticket  t ON o.IdTicket = t.Uuid
        LEFT  JOIN btz_user u ON t.IdUser = u.Id
        LEFT  JOIN btz_product P ON o.IdSection = P.id        
        LEFT  JOIN btz_productfield pf ON pf.Name = 'Description'
        LEFT  JOIN btz_productfieldvalue pftp ON pf.IdField = pftp.IdField and P.Id = pftp.IdProduct
        LEFT  JOIN btz_user usu ON t.IdUserReadQR = usu.Id
        LEFT  JOIN btz_productfieldvalue pev ON pf.IdField = pev.IdField and o.IdEvent = pev.IdProduct
  LEFT JOIN btz_productcategory pc ON pc.IdProduct = o.IdSection
  LEFT JOIN btz_categoryvalue ca ON pc.IdCategory = ca.IdCategory
WHERE o.Status != 0 AND o.IdEvent = @p0 AND t.Type = 'Product';</value>
  </data>
  <data name="GetEventTickets" xml:space="preserve">
    <value>SELECT	po.EventId,
		po.NomeIngresso,
		po.ValorIngresso,
		po.DataInicio
FROM (
		SELECT	ps.IdProduct AS EventId,
				CAST(MAX(CASE WHEN (PF.Name = 'Valor do ingresso') THEN PFV.Value END) AS DECIMAL) AS ValorIngresso,
				MAX(CASE WHEN (PF.Name = 'Descrição do ingresso') THEN PFV.Value END) AS NomeIngresso,
				CAST(MAX(CASE WHEN (PF.Name = 'Data e hora de inicio') THEN PFV.Value END) AS DATETIME) AS DataInicio
		FROM 	btz_productsub ps
				INNER JOIN btz_product P ON P.id = ps.idsubproduct    
				INNER JOIN btz_productfieldvalue PFV ON PFV.IdProduct = P.Id
				INNER JOIN btz_productfield PF ON PF.IdField = PFV.IdField
		WHERE 	ps.idProduct IN (SELECT EventId FROM vproductevent) AND P.idType = 2 AND P.Disabled = 0 AND P.Hide = 0
		GROUP 	BY ps.idproduct, P.Id
  ) po
WHERE 	po.EventId = @p0 AND po.DataInicio &gt;= CURRENT_DATE</value>
  </data>
  <data name="GetExtractByUser" xml:space="preserve">
    <value>SELECT * FROM pagfun_extract WHERE IdUser = @p0;</value>
  </data>
  <data name="GetNextEvents" xml:space="preserve">
    <value>SELECT po.Id as EventId,
       po.SKU,
       po.EventName,
       po.EventLocal,
       po.EventImageId,
       po.EventInicialDate,
       po.EventFinalDate,
       po.CityId,  
       AV.Value as City,
  po.Disabled,
  po.Hide
  FROM (
    SELECT
    P.Id,
    P.SKU,
    PFV.IdProduct AS IdProduct,
    P.Hide,
    P.Disabled,
    P.IdType,
    MAX(PAT.IdAttribute) AS CityId,
    MAX(CASE WHEN (PF.Name = 'Description') THEN PFV.Value END) AS EventName,
    MAX(CASE WHEN (PF.Name = 'Nome local') THEN PFV.Value END) AS EventLocal,
    MAX(CASE WHEN (PF.Name = 'Mini banner') THEN PFV.Value END) AS EventImageId,
   	CAST(MAX(CASE WHEN (PF.Name = 'Data de inicio') THEN PFV.Value END) AS DATETIME) AS EventInicialDate,
  	CAST(MAX(CASE WHEN (PF.Name = 'Data de término') THEN PFV.Value END) AS DATETIME) AS EventFinalDate
    FROM btz_product P
      INNER JOIN btz_productfieldvalue PFV ON PFV.IdProduct = P.Id
      INNER JOIN btz_productfield PF ON PF.IdField = PFV.IdField
      INNER JOIN btz_productattribute PAT ON PAT.IdProduct = P.Id
    WHERE P.Disabled = 0 AND P.Hide = 0 AND P.IdType = 1
    GROUP BY P.Id
      ) po
	INNER JOIN btz_attributevalues AV ON po.CityId = AV.Id
    WHERE po.EventInicialDate &gt;= CURRENT_DATE AND po.EventInicialDate &lt;= DATE_ADD(CURRENT_DATE(), INTERVAL 60 DAY)
    ORDER BY po.EventInicialDate;</value>
  </data>
  <data name="GetOrderById" xml:space="preserve">
    <value>SELECT 	O.Id,
		O.IdCustomer,
		CAST((OD.Price) AS DECIMAL(12,2)) AS Price,
		CAST((MAX(CASE WHEN (OF.Field = 'Credit') THEN OF.Value END)) AS DECIMAL(12,2)) AS Credit,
		MAX(CASE WHEN (ODF.Field = 'EventName') THEN ODF.Value END) AS OrderName,
        MAX(CASE WHEN (ODF.Field = 'OwnerName') THEN ODF.Value END) AS OwnerName
FROM btz_order O
JOIN btz_orderfield OF 
ON O.Id = OF.IdOrder
JOIN btz_orderdetail OD
ON O.Id = OD.IdOrder
JOIN btz_orderdetailfield ODF
ON OD.Id = ODF.IdOrderDetail
WHERE O.Id = @p0 GROUP BY O.Id, OD.Price;</value>
  </data>
  <data name="GetOrderByUuid" xml:space="preserve">
    <value>SELECT 	O.Id,
		O.Uuid,
		O.IdCustomer ,
		CAST(SUM(OD.Price) AS DECIMAL(12,2)) AS Price,
		MAX(CAST(OF.Value AS DECIMAL(12,2))) AS Credit,
		PFV.Value AS EventName
FROM btz_order O
JOIN btz_orderfield OF 
 	ON O.Id = OF.IdOrder AND OF.Field = 'Credit'
JOIN btz_orderdetail OD
	ON O.Id = OD.IdOrder
JOIN btz_orderdetailfield ODF
	ON OD.Id = ODF.IdOrderDetail AND ODF.Field = 'IdEvent'
JOIN btz_product PD
	ON	ODF.Value = PD.Id
JOIN btz_productfieldvalue PFV
	ON	PD.Id = PFV.IdProduct
JOIN btz_productfield PF
	ON PFV.IdField = PF.IdField AND PF.Name = 'Description'
WHERE Uuid = @p0
GROUP BY O.Id, O.Uuid, O.IdCustomer, PFV.Value;</value>
  </data>
  <data name="GetPromoterInvitesByIdUser" xml:space="preserve">
    <value>SELECT * FROM pagfun_promoter_invite WHERE IdUser = @p0;</value>
  </data>
  <data name="GetPromoterTicketBalanceByPromoterCode" xml:space="preserve">
    <value>SELECT * FROM vPromoterEventBalance WHERE PromoterCode = @p0 AND SectionId = @p1</value>
  </data>
  <data name="GetPromoterTicketByPromoterCode" xml:space="preserve">
    <value>SELECT * FROM pagfun_promoter_events WHERE IdPromoter = @p0 AND IdTicket = @p1;</value>
  </data>
  <data name="GetPromoterTicketValue" xml:space="preserve">
    <value>SELECT	e.*
FROM	pagfun_promoter_events e
		INNER JOIN btz_userfield f
			ON	f.Name = 'CodigoPromoter' AND
				e.IdPromoter = f.Value
		INNER JOIN btz_user u
			ON	f.IdUser = u.Id
WHERE	u.Email = @p0 AND e.IdEvent = @p1 AND e.IdTicket = @p2</value>
  </data>
  <data name="GetTicketById" xml:space="preserve">
    <value>SELECT * 
FROM btz_ticket 
where Id = @p0;</value>
  </data>
  <data name="GetUserByEmail" xml:space="preserve">
    <value>SELECT 
	U.Id,
    U.Email,
    U.FirstName,
    U.LastName,
	MAX(CASE WHEN (UF.Name = 'Nome Completo') THEN UF.Value END) AS CompleteName
FROM btz_user U
JOIN btz_userfield UF
ON U.Id = UF.IdUser
WHERE U.Email = @p0 
GROUP BY U.Id, U.Email;</value>
  </data>
  <data name="GetUserById" xml:space="preserve">
    <value>SELECT * 
FROM btz_user 
where Id = @p0;</value>
  </data>
  <data name="GetUserCPF" xml:space="preserve">
    <value>SELECT Id FROM btz_userfield where btz_userfield.Name = 'CPF' AND Value = @p0 LIMIT 1;</value>
  </data>
  <data name="InsertPromoterEvent" xml:space="preserve">
    <value>INSERT INTO pagfun_promoter_events(IdPromoter, IdEvent, IdTicket, TicketQuantity, TicketValue, ChargeFee, TicketsTax, Vip) VALUES(@p0,@p1,@p2,@p3,@p4,@p5,@p6,@p7);</value>
  </data>
  <data name="InsertPromoterInvite" xml:space="preserve">
    <value>INSERT INTO pagfun_promoter_invite(IdPromoter, IdUser, IdEvent, PromoterName, PromoterEmail, Status, CreatedAt, UpdatedAt) VALUES(@p0,null,@p1,@p2,@p3, 'Pendente', @p4, @p5);</value>
  </data>
  <data name="ListPromotersInviteByEvent" xml:space="preserve">
    <value>SELECT * FROM pagfun_promoter_invite WHERE IdEvent = @p0;</value>
  </data>
  <data name="RetrieveEventSolds" xml:space="preserve">
    <value>SELECT T.IdEvent as IdEvent,
	COUNT(T.IdEvent) as Solds
	FROM btz_ticket T
	WHERE T.Type = @p0 AND T.Status = @p1
	GROUP BY T.IdEvent
	ORDER BY Solds DESC;</value>
  </data>
  <data name="RetrieveTicketsBySituation_New" xml:space="preserve">
    <value>SELECT SUM(
CASE WHEN T.Status = 0
THEN 1 ELSE 0 END) AS Created,
SUM(
CASE WHEN T.Status = 1
THEN 1 ELSE 0 END) AS Emitted,
SUM(
CASE WHEN T.Status = 3
THEN 1 ELSE 0 END) AS Cancelled,
T.IdEvent as IdEvent,
COUNT(T.IdEvent) as Solds
FROM btz_ticket T
WHERE T.Type = 'Event' AND T.AlterationDate &gt;= @p0 AND T.AlterationDate &lt;= @p1
GROUP BY T.IdEvent;</value>
  </data>
  <data name="RetrieveTicketsBySituation_Old" xml:space="preserve">
    <value>SELECT SUM(
CASE WHEN T.Status = 0
THEN 1 ELSE 0 END) AS Created,
SUM(
CASE WHEN T.Status = 1
THEN 1 ELSE 0 END) AS Emitted,
SUM(
CASE WHEN T.Status = 3
THEN 1 ELSE 0 END) AS Cancelled,
T.IdEvent as IdEvent,
COUNT(T.IdEvent) as Solds
FROM btz_ticket T
WHERE T.Type = 'Event'
GROUP BY T.IdEvent
ORDER BY Solds DESC;</value>
  </data>
  <data name="RetrieveTicketsCount" xml:space="preserve">
    <value>SELECT T.IdEvent as IdEvent,
	T.IdSection as IdSection,
	COUNT(T.IdEvent) as Solds
	FROM btz_ticket T
	WHERE T.AlterationDate &gt;= @p0 AND T.AlterationDate &lt;= @p1
    AND T.Type = @p2 AND T.Status = @p3
	GROUP BY T.IdEvent, T.IdSection
	ORDER BY Solds DESC;</value>
  </data>
  <data name="RetriveAllEventsByCategory" xml:space="preserve">
    <value>SELECT 
	P.Id,
    PC.IdCategory,
	P.Disabled
FROM btz_productcategory PC
INNER JOIN btz_product P ON P.Id = PC.IdProduct
WHERE PC.IdCategory = @p0</value>
  </data>
  <data name="RetriveBestSellers" xml:space="preserve">
    <value>SELECT  T.IdEvent as Event,
COUNT(T.IdEvent) as Solds
 FROM btz_ticket T 
WHERE T.Type = 'Event' AND T.Status = 0 OR T.Status = 1 OR T.Status = 5 
GROUP BY T.IdEvent 
ORDER BY Solds DESC;</value>
  </data>
  <data name="RetriveBestSellersCategory" xml:space="preserve">
    <value>SELECT T.IdEvent as Event,
COUNT(T.IdEvent) as Solds,
cv.Value AS Category,
cv.IdCategory AS IdCategory,
c.Disabled AS CategoryDisabled,
c.Highlighted AS CategoryHighlighted
FROM btz_ticket T
INNER JOIN btz_productcategory pc ON pc.IdProduct = T.IdEvent
INNER JOIN btz_category c ON c.Id = pc.IdCategory
INNER JOIN btz_categoryvalue cv ON cv.IdCategory = pc.IdCategory
WHERE T.Type = 'Event' AND cv.IdCategory = @p0 AND T.Status != 2 AND T.Status != 3 AND T.Status != 4
GROUP BY T.IdEvent, cv.Value, cv.IdCategory, c.Disabled, c.Highlighted
ORDER BY Solds DESC</value>
  </data>
  <data name="RetriveCategoriesByIdParent" xml:space="preserve">
    <value>SELECT 
	C.Id AS IdCategory,
	C.IdParent,
    C.Disabled,
    C.Highlighted,
    C.Image AS ImageDefault,
    CV.Value AS CategoryName,
    CV.Url AS CategoryUrl
FROM btz_category C
INNER JOIN btz_categoryvalue CV ON CV.IdCategory = C.Id
WHERE C.IdParent = @p0 AND C.Disabled = 0;</value>
  </data>
  <data name="RetriveDistinctUserFromSection" xml:space="preserve">
    <value>SELECT DISTINCT IdUser FROM btz_ticket WHERE IdSection = @p0;</value>
  </data>
  <data name="RetriveEventIdFromSectionId" xml:space="preserve">
    <value>SELECT R.IdProduct as EventId
FROM btz_productsub R
WHERE R.IdSubProduct = @p0;</value>
  </data>
  <data name="RetriveFormatedEvent" xml:space="preserve">
    <value>SELECT DISTINCT R.Id as EventId,
    MAX(CASE WHEN (F.Name = 'Description') THEN P.Value END) AS EventName,
    MAX(CASE WHEN (F.Name = 'Nome local') THEN P.Value END) AS EventLocal,
    MAX(CASE WHEN (F.Name = 'Mini banner') THEN P.Value END) AS EventImageId,
	MAX(CASE WHEN (F.Name = 'Data de inicio') THEN P.Value END) AS EventInicialDate,
	MAX(CASE WHEN (F.Name = 'Data de término') THEN P.Value END) AS EventFinalDate,
MAX(CASE WHEN (F.Name = 'Preço do produto') THEN P.Value END) AS PriceProduct
FROM btz_product R
INNER JOIN btz_productfieldvalue P ON P.IdProduct = R.Id
INNER JOIN btz_productfield F ON F.IdField = P.IdField
WHERE R.Id = @p0 
GROUP BY R.Id</value>
  </data>
  <data name="RetriveFormatedEventBestSellers" xml:space="preserve">
    <value>SELECT DISTINCT R.Id as EventId,
    MAX(CASE WHEN (F.Name = 'Description') THEN P.Value END) AS EventName,
    MAX(CASE WHEN (F.Name = 'Nome local') THEN P.Value END) AS EventLocal,
    MAX(CASE WHEN (F.Name = 'Mini banner') THEN P.Value END) AS EventImageId,
    MAX(CASE WHEN (F.Name = 'Data de término') THEN P.Value END) AS EventFinalDate
FROM btz_product R
INNER JOIN btz_productfieldvalue P ON P.IdProduct = R.Id
INNER JOIN btz_productfield F ON F.IdField = P.IdField
WHERE R.Disabled = 0 AND R.Id = @p0  
GROUP BY R.Id;</value>
  </data>
  <data name="RetriveFormatedSection" xml:space="preserve">
    <value>SELECT DISTINCT R.Id as SectionId,
    MAX(CASE WHEN (F.Name = 'Description') THEN P.Value END) AS SectionName,
    MAX(CASE WHEN (F.Name = 'Data e hora de inicio') THEN P.Value END) AS SectionDateTime,
    MAX(CASE WHEN (F.Name = 'Taxa de serviços') THEN P.Value END) AS SectionTicketTax,
	MAX(CASE WHEN (F.Name = 'Valor do ingresso') THEN P.Value END) AS SectionTicketValue
FROM btz_product R
INNER JOIN btz_productfieldvalue P ON P.IdProduct = R.Id
INNER JOIN btz_productfield F ON F.IdField = P.IdField
WHERE R.Id = @p0 
GROUP BY R.Id;</value>
  </data>
  <data name="RetriveSectionsBeforeXDays" xml:space="preserve">
    <value>SELECT sections.Id FROM (
	SELECT DISTINCT 
	R.Id as Id, 
    CASE WHEN (F.Name = 'Description') THEN P.Value END AS SectionName,
	STR_TO_DATE (CASE WHEN(F.Name = 'Data e hora de inicio') THEN P.Value END,'%Y-%m-%dT%H:%i') AS SectionDateTime
	FROM btz_product R
	INNER JOIN btz_productfieldvalue P ON P.IdProduct = R.Id
	INNER JOIN btz_productfield F ON F.IdField = P.IdField
	WHERE R.IdType = 2 AND F.Name = 'Data e hora de inicio'
	GROUP BY R.Id, P.Value
	) sections
WHERE DAY(CURDATE()) = DAY(DATE_SUB(sections.SectionDateTime, INTERVAL @p0 DAY)) AND
MONTH(CURDATE()) = MONTH(DATE_SUB(sections.SectionDateTime, INTERVAL @p0 DAY)) AND
YEAR(CURDATE()) = YEAR(DATE_SUB(sections.SectionDateTime, INTERVAL @p0 DAY));</value>
  </data>
  <data name="SelectAttributes" xml:space="preserve">
    <value>SELECT	c.*, 
		v.Value AS Description, 
		n.Value as Type,
        b.Codigo
FROM    btz_attribute c
        LEFT JOIN btz_attributevalues v ON c.Id = v.Id AND v.IdLanguage = @p0
		LEFT JOIN btz_attributetype b ON c.IdType = b.Id
		LEFT JOIN btz_attributetypevalues n ON n.Id = c.IdType AND n.IdLanguage = @p0;</value>
  </data>
  <data name="SetNewOwnerTicket" xml:space="preserve">
    <value>UPDATE btz_ticket TK
SET TK.OwnerName = @p1, TK.IdUser = @p2
WHERE TK.Id = @p0;</value>
  </data>
  <data name="UpdateOrderStatusApproved" xml:space="preserve">
    <value>UPDATE btz_order
SET btz_order.Status = 3
WHERE btz_order.Id = @p0;</value>
  </data>
  <data name="UpdateOrderStatusApprovedUuid" xml:space="preserve">
    <value>UPDATE btz_order
SET btz_order.Status = 3
WHERE btz_order.Uuid= @p0;</value>
  </data>
  <data name="UpdateProductStatusToActive" xml:space="preserve">
    <value>UPDATE btz_product
 SET Hide = false,
 Disabled = false
 WHERE Id = @p0;</value>
  </data>
  <data name="UpdateProductStatusToDisabled" xml:space="preserve">
    <value>UPDATE btz_product
 SET Hide = false,
 Disabled = true
WHERE Id = @p0;</value>
  </data>
  <data name="UpdateProductStatusToPaused" xml:space="preserve">
    <value>UPDATE btz_product
 SET Hide = true
WHERE Id = @p0;</value>
  </data>
  <data name="UpdatePromoterEvents" xml:space="preserve">
    <value>UPDATE pagfun_promoter_events SET TicketQuantity = @p1, TicketValue = @p2, ChargeFee = @p3, TicketsTax = @p4, vip = @p5 WHERE Id = @p0;</value>
  </data>
  <data name="UpdateSessionDates" xml:space="preserve">
    <value>UPDATE	btz_productfieldvalue
SET		Value = CASE
					WHEN IdField = (SELECT IdField FROM btz_productfield f WHERE IdField = btz_productfieldvalue.IdField AND Name = 'Data e hora de inicio') THEN @p2
                    WHEN IdField = (SELECT IdField FROM btz_productfield f WHERE IdField = btz_productfieldvalue.IdField AND Name = 'Data de inicio das vendas') THEN @p3
                    WHEN IdField = (SELECT IdField FROM btz_productfield f WHERE IdField = btz_productfieldvalue.IdField AND Name = 'Data de término das vendas') THEN @p4
				END
WHERE	IdProduct IN
		(
			SELECT	sesChild.Id
			FROM	btz_product P
					INNER JOIN btz_productsub sub
						ON	P.Id = sub.IdProduct
					INNER JOIN btz_product child
						ON	sub.IdSubProduct = child.Id
					INNER JOIN btz_producttype type
						ON	child.IdType = type.Id
					INNER JOIN btz_product sesChild
						ON	child.SKU = sesChild.SKU AND
							sub.IdSubProduct = sesChild.Id
					INNER JOIN btz_productsub sesSub
						ON	sesSub.IdProduct = P.Id AND
							sesSub.IdSubProduct = sesChild.Id
			WHERE	type.Description = 'Sessão' AND
					P.Id = @p0 AND
					child.Id = @p1
        ) AND
        IdField IN (SELECT IdField FROM btz_productfield WHERE Name IN ('Data e hora de inicio', 'Data de inicio das vendas', 'Data de término das vendas'))</value>
  </data>
  <data name="UpdateStatusPromoterInvite" xml:space="preserve">
    <value>UPDATE pagfun_promoter_invite SET pagfun_promoter_invite.Status = 'Aprovado', IdUser = @p0, UpdatedAt = now() WHERE pagfun_promoter_invite.IdPromoter = @p1;</value>
  </data>
  <data name="UpdateUserRolePromoter" xml:space="preserve">
    <value>UPDATE btz_user SET IdRole = 8 WHERE btz_user.Id = @p0;</value>
  </data>
  <data name="ValidateIfPromoterInviteExists" xml:space="preserve">
    <value>SELECT * FROM pagfun_promoter_invite WHERE IdUser = @p0 AND IdEvent = @p1;</value>
  </data>
  <data name="ViewAdminEventBalance" xml:space="preserve">
    <value>CREATE OR REPLACE VIEW `vproductevent` AS select `po`.`Id` AS `EventId`,`po`.`SKU` AS `SKU`,`po`.`EventName` AS `EventName`,`po`.`EventLocal` AS `EventLocal`,`po`.`EventImageId` AS `EventImageId`,`po`.`EventInicialDate` AS `EventInicialDate`,`po`.`EventFinalDate` AS `EventFinalDate`,`po`.`CityId` AS `CityId`,`av`.`Value` AS `City`,`po`.`Disabled` AS `Disabled`,`po`.`Hide` AS `Hide` from (((select `p`.`Id` AS `Id`,`p`.`SKU` AS `SKU`,`pfv`.`IdProduct` AS `IdProduct`,`p`.`Hide` AS `Hide`,`p`.`Disabled` AS `Disabled`,`p`.`IdType` AS `IdType`,max(`pat`.`IdAttribute`) AS `CityId`,max((case when (`pf`.`Name` = 'Description') then `pfv`.`Value` end)) AS `EventName`,max((case when (`pf`.`Name` = 'Nome local') then `pfv`.`Value` end)) AS `EventLocal`,max((case when (`pf`.`Name` = 'Mini banner') then `pfv`.`Value` end)) AS `EventImageId`,cast(max((case when (`pf`.`Name` = 'Data de inicio') then `pfv`.`Value` end)) as datetime) AS `EventInicialDate`,cast(max((case when (`pf`.`Name` = 'Data de término') then `pfv`.`Value` end)) as datetime) AS `EventFinalDate` from (((`btz_product` `p` join `btz_productfieldvalue` `pfv` on((`pfv`.`IdProduct` = `p`.`Id`))) join `btz_productfield` `pf` on((`pf`.`IdField` = `pfv`.`IdField`))) join `btz_productattribute` `pat` on((`pat`.`IdProduct` = `p`.`Id`))) where ((`p`.`Disabled` = 0) and (`p`.`Hide` = 0) and (`p`.`IdType` = 1)) group by `p`.`Id`)) `po` join `btz_attributevalues` `av` on((`po`.`CityId` = `av`.`Id`)));</value>
  </data>
  <data name="ViewOrderDetailField" xml:space="preserve">
    <value>CREATE OR REPLACE VIEW vorderdetailfield
AS
SELECT  o.Id,
	d.IdProduct AS IdSeq,
	d.Quantity,
	d.Price,
	o.Status,
	MAX(IF(f.Field = 'IdSection', f.Value, NULL)) AS IdSection,
	MAX(IF(f.Field = 'IdEvent', f.Value, NULL)) AS EventId,
	MAX(IF(f.Field = 'IdTicket', f.Value, NULL)) AS IdTicket,
	MAX(IF(f.Field = 'StatusEntrega', f.Value, NULL)) AS ItemOrderStatus,
	MAX(IF(f.Field = 'Mesa', f.Value, NULL)) AS Mesa,
	MAX(IF(f.Field = 'DataEntrega', f.Value, NULL)) AS DataEntrega,
	MAX(IF(f.Field = 'TempoEntrega', f.Value, NULL)) AS TempoEntrega,
    MAX(IF(f.Field = 'Type', f.Value, 'Event')) AS Tipo
FROM    btz_order o
	INNER JOIN btz_orderdetail      d ON o.Id = d.IdOrder
	INNER JOIN btz_orderdetailfield f ON d.Id = f.IdOrderDetail
	
GROUP   BY o.Id,
	o.Uuid,
	d.Id,
	d.IdProduct,
	d.Quantity,
	d.Price;</value>
  </data>
  <data name="ViewProductEvent" xml:space="preserve">
    <value>CREATE OR REPLACE VIEW vproductevent
AS 
SELECT po.Id AS EventId,
       po.SKU,
       po.EventName,
       po.EventLocal,
       po.EventImageId,
       po.EventInicialDate,
       po.EventFinalDate,
       po.CityId,
       AV.Value as City,
  po.Disabled,
  po.Hide
  FROM (
    SELECT
    P.Id,
    P.SKU,
    PFV.IdProduct AS IdProduct,
    P.Hide,
    P.Disabled,
    P.IdType,
    MAX(PAT.IdAttribute) AS CityId,
    MAX(CASE WHEN (PF.Name = 'Description') THEN PFV.Value END) AS EventName,
    MAX(CASE WHEN (PF.Name = 'Nome local') THEN PFV.Value END) AS EventLocal,
    MAX(CASE WHEN (PF.Name = 'Mini banner') THEN PFV.Value END) AS EventImageId,
   	CAST(MAX(CASE WHEN (PF.Name = 'Data de inicio') THEN PFV.Value END) AS DATETIME) AS EventInicialDate,
  	CAST(MAX(CASE WHEN (PF.Name = 'Data de término') THEN PFV.Value END) AS DATETIME) AS EventFinalDate
    FROM btz_product P
      INNER JOIN btz_productfieldvalue PFV ON PFV.IdProduct = P.Id
      INNER JOIN btz_productfield PF ON PF.IdField = PFV.IdField
      INNER JOIN btz_productattribute PAT ON PAT.IdProduct = P.Id
    WHERE P.Disabled = 0 AND P.Hide = 0 AND P.IdType = 1
    GROUP BY P.Id
      ) po
	INNER JOIN btz_attributevalues AV ON po.CityId = AV.Id;</value>
  </data>
  <data name="ViewProductEventDetail" xml:space="preserve">
    <value>CREATE OR REPLACE VIEW `vproducteventdetail` AS select `pd`.`Id` AS `IdEvent`,`pdfd`.`Value` AS `EventName`,`subpd`.`Id` AS `IdSection`,`sdfd`.`Value` AS `SectionName`,cast(`pdfv`.`Value` as signed) AS `TicketFullStorage`,cast(replace(replace(`pdfvl`.`Value`,'.',''),',','.') as decimal(18,2)) AS `TicketFullValue`,(coalesce(`promoterevents`.`FullReservedStock`,0) - coalesce(`tickets`.`PromotersSoldTickets`,0)) AS `ReservedStock`,coalesce(`tickets`.`SoldTickets`,0) AS `SoldTickets`,coalesce(`tickets`.`DirectSoldTickets`,0) AS `DirectSoldTickets`,coalesce(`tickets`.`PromotersSoldTickets`,0) AS `PromotersSoldTickets` from (((((((((((((`btz_product` `pd` join `btz_producttype` `pdtype` on(((`pd`.`IdType` = `pdtype`.`Id`) and (`pdtype`.`Description` = 'Evento')))) join `btz_productsub` `sub` on((`pd`.`Id` = `sub`.`IdProduct`))) join `btz_product` `subpd` on((`sub`.`IdSubProduct` = `subpd`.`Id`))) join `btz_producttype` `subpdtype` on(((`subpd`.`IdType` = `subpdtype`.`Id`) and (`subpdtype`.`Description` = 'Sessão')))) join `btz_productfield` `pdf` on((`pdf`.`Name` = 'Quantidade de ingressos'))) join `btz_productfield` `pdv` on((`pdv`.`Name` = 'Valor do ingresso'))) join `btz_productfield` `pdd` on((`pdd`.`Name` = 'Description'))) join `btz_productfieldvalue` `pdfv` on(((`pdf`.`IdField` = `pdfv`.`IdField`) and (`subpd`.`Id` = `pdfv`.`IdProduct`)))) join `btz_productfieldvalue` `pdfd` on(((`pdd`.`IdField` = `pdfd`.`IdField`) and (`pd`.`Id` = `pdfd`.`IdProduct`)))) join `btz_productfieldvalue` `sdfd` on(((`pdd`.`IdField` = `sdfd`.`IdField`) and (`subpd`.`Id` = `sdfd`.`IdProduct`)))) join `btz_productfieldvalue` `pdfvl` on(((`pdv`.`IdField` = `pdfvl`.`IdField`) and (`subpd`.`Id` = `pdfvl`.`IdProduct`)))) left join (select `pagfun_promoter_events`.`IdEvent` AS `IdEvent`,`pagfun_promoter_events`.`IdTicket` AS `IdTicket`,sum(`pagfun_promoter_events`.`TicketQuantity`) AS `FullReservedStock` from `pagfun_promoter_events` group by `pagfun_promoter_events`.`IdEvent`,`pagfun_promoter_events`.`IdTicket`) `promoterevents` on(((`pd`.`Id` = `promoterevents`.`IdEvent`) and (`subpd`.`Id` = `promoterevents`.`IdTicket`)))) left join (select `vsoldticketsbyorder`.`IdEvent` AS `IdEvent`,`vsoldticketsbyorder`.`IdSection` AS `IdSection`,sum(`vsoldticketsbyorder`.`SoldTickets`) AS `SoldTickets`,(sum(`vsoldticketsbyorder`.`SoldTickets`) - sum((case when (`vsoldticketsbyorder`.`PromoterCode` is not null) then `vsoldticketsbyorder`.`SoldTickets` else 0 end))) AS `DirectSoldTickets`,sum((case when (`vsoldticketsbyorder`.`PromoterCode` is not null) then `vsoldticketsbyorder`.`SoldTickets` else 0 end)) AS `PromotersSoldTickets` from `vsoldticketsbyorder` group by `vsoldticketsbyorder`.`IdEvent`,`vsoldticketsbyorder`.`IdSection`) `tickets` on(((`pd`.`Id` = `tickets`.`IdEvent`) and (`subpd`.`Id` = `tickets`.`IdSection`))));</value>
  </data>
  <data name="ViewPromoterEventBalance" xml:space="preserve">
    <value>CREATE OR REPLACE VIEW `vpromotereventbalance` AS select `products`.`IdEvent` AS `EventId`,`products`.`EventName` AS `EventName`,`products`.`IdSection` AS `SectionId`,`products`.`SectionName` AS `SectionName`,`promoterevents`.`IdPromoter` AS `PromoterCode`,`products`.`TicketFullValue` AS `FullValue`,max(`promoterevents`.`TicketValue`) AS `PromoterValue`,count(distinct `tickets`.`IdOrder`) AS `Orders`,`products`.`TicketFullStorage` AS `Storage`,`products`.`SoldTickets` AS `SoldTickets`,((max(`products`.`TicketFullStorage`) - `products`.`SoldTickets`) - `products`.`ReservedStock`) AS `StorageBalance`,`products`.`DirectSoldTickets` AS `DirectSoldTickets`,sum((case when (`tickets`.`PromoterCode` is not null) then coalesce(`tickets`.`SoldTickets`,0) else 0 end)) AS `PromoterSoldTickets`,max(coalesce(`promoterevents`.`TicketQuantity`,0)) AS `PromoterStorage`,(max(coalesce(`promoterevents`.`TicketQuantity`,0)) - sum((case when (`tickets`.`PromoterCode` is not null) then coalesce(`tickets`.`SoldTickets`,0) else 0 end))) AS `PromoterStorageBalance`,cast((sum((coalesce(`tickets`.`SoldTickets`,0) * coalesce(`tickets`.`Price`,0))) - sum(((case when (`tickets`.`PromoterCode` is not null) then coalesce(`tickets`.`SoldTickets`,0) else 0.0 end) * coalesce(`tickets`.`Price`,0)))) as decimal(18,2)) AS `DirectRecipy`,cast(sum((case when ((`tickets`.`IdOrder` is not null) and (`tickets`.`PromoterCode` is not null)) then (coalesce(`tickets`.`SoldTickets`,0) * `tickets`.`Price`) else 0.0 end)) as decimal(18,2)) AS `PromoterRecipy` from ((`vproducteventdetail` `products` left join `pagfun_promoter_events` `promoterevents` on(((`products`.`IdEvent` = `promoterevents`.`IdEvent`) and (`products`.`IdSection` = `promoterevents`.`IdTicket`)))) left join `vsoldticketsbyorder` `tickets` on(((`products`.`IdEvent` = `tickets`.`IdEvent`) and (`products`.`IdSection` = `tickets`.`IdSection`) and (isnull(`tickets`.`PromoterCode`) or (`tickets`.`PromoterCode` = `promoterevents`.`IdPromoter`))))) group by `products`.`IdEvent`,`products`.`EventName`,`products`.`IdSection`,`products`.`SectionName`,`products`.`TicketFullStorage`,`products`.`TicketFullValue`,`products`.`ReservedStock`,`products`.`SoldTickets`,`products`.`DirectSoldTickets`,`promoterevents`.`IdPromoter`;</value>
  </data>
  <data name="ViewRemainingPromoters" xml:space="preserve">
    <value>CREATE OR REPLACE VIEW `vremainingpromoters` AS select `uf`.`Value` AS `IdPromoter`,`event`.`IdEvent` AS `IdEvent`,`event`.`IdSection` AS `IdTicket`,0 AS `TicketQuantity`,`event`.`TicketFullValue` AS `TicketValue`,0 AS `ChargeFee`,0 AS `TicketsTax`,0 AS `Vip` from (((`vproducteventdetail` `event` join `btz_user` `user`) join `btz_userfield` `uf` on(((`user`.`Id` = `uf`.`IdUser`) and (`uf`.`Name` = 'CodigoPromoter')))) left join `pagfun_promoter_events` `pe` on(((`event`.`IdEvent` = `pe`.`IdEvent`) and (`event`.`IdSection` = `pe`.`IdTicket`) and (`pe`.`IdPromoter` = `uf`.`Value`)))) where (isnull(`pe`.`Id`) and exists(select 1 from `pagfun_promoter_events` where ((`pagfun_promoter_events`.`IdPromoter` = `uf`.`Value`) and (`pagfun_promoter_events`.`IdEvent` = `event`.`IdEvent`))));</value>
  </data>
  <data name="ViewSoldTicketsByOrder" xml:space="preserve">
    <value>CREATE OR REPLACE VIEW `vsoldticketsbyorder` AS select `ordervalue`.`IdOrder` AS `IdOrder`,`ticketvalue`.`uuidOrder` AS `uuidOrder`,`ticketvalue`.`IdEvent` AS `IdEvent`,`ticketvalue`.`IdSection` AS `IdSection`,`ordervalue`.`PromoterEmail` AS `PromoterEmail`,(case when ((`ordervalue`.`PromoterCode` is not null) and (`ordervalue`.`PromoterCode` &lt;&gt; '')) then `ordervalue`.`PromoterCode` else NULL end) AS `PromoterCode`,`ticketvalue`.`SoldTickets` AS `SoldTickets`,max(`ordervalue`.`Price`) AS `Price` from (((select `tk`.`uuidOrder` AS `uuidOrder`,`tk`.`IdEvent` AS `IdEvent`,`tk`.`IdSection` AS `IdSection`,count(`tk`.`Id`) AS `SoldTickets` from `btz_ticket` `tk` where ((`tk`.`Status` in (1,5)) and (`tk`.`Type` = 'Event')) group by `tk`.`uuidOrder`,`tk`.`IdEvent`,`tk`.`IdSection`)) `ticketvalue` join (select `ord`.`Id` AS `IdOrder`,`ord`.`Uuid` AS `uuidOrder`,`ode`.`Value` AS `IdEvent`,`ods`.`Value` AS `IdSection`,`us`.`Email` AS `PromoterEmail`,`usf`.`Value` AS `PromoterCode`,`od`.`Price` AS `Price` from ((((((`btz_order` `ord` join `btz_orderdetail` `od` on((`ord`.`Id` = `od`.`IdOrder`))) join `btz_orderdetailfield` `ode` on(((`ode`.`IdOrderDetail` = `od`.`Id`) and (`ode`.`Field` = 'IdEvent')))) join `btz_orderdetailfield` `ods` on(((`ods`.`IdOrderDetail` = `od`.`Id`) and (`ods`.`Field` = 'IdSection')))) left join `btz_orderdetailfield` `odg` on(((`odg`.`IdOrderDetail` = `od`.`Id`) and (`odg`.`Field` = 'GeneratorEmail')))) left join `btz_user` `us` on((`odg`.`Value` = `us`.`Email`))) left join `btz_userfield` `usf` on(((`us`.`Id` = `usf`.`IdUser`) and (`usf`.`Name` = 'CodigoPromoter')))) where (`ord`.`Status` in (1,2,3,4,14,5))) `ordervalue` on(((`ticketvalue`.`uuidOrder` = `ordervalue`.`uuidOrder`) and (`ticketvalue`.`IdEvent` = `ordervalue`.`IdEvent`) and (`ticketvalue`.`IdSection` = `ordervalue`.`IdSection`)))) group by `ordervalue`.`IdOrder`,`ticketvalue`.`uuidOrder`,`ticketvalue`.`IdEvent`,`ticketvalue`.`IdSection`,`ordervalue`.`PromoterEmail`,`ordervalue`.`PromoterCode`,`ticketvalue`.`SoldTickets`;</value>
  </data>
</root>